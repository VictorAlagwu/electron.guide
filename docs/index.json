[{"body":" BrowserWindow Windows    Windows 10 Windows 7              MacOS   Sample Code const {BrowserWindow} = require(\u0026#39;electron\u0026#39;).remote const path = require(\u0026#39;path\u0026#39;) const newWindowBtn = document.getElementById(\u0026#39;new-window\u0026#39;) newWindowBtn.addEventListener(\u0026#39;click\u0026#39;, (event) =\u0026gt; { const modalPath = path.join(\u0026#39;file://\u0026#39;, __dirname, \u0026#39;../../sections/windows/modal.html\u0026#39;) let win = new BrowserWindow({ width: 400, height: 320 }) win.on(\u0026#39;close\u0026#39;, () =\u0026gt; { win = null }) win.loadURL(modalPath) win.show() }) ","excerpt":" BrowserWindow Windows    Windows 10 Windows 7              MacOS   Sample Code const {BrowserWindow} = require(\u0026#39;electron\u0026#39;).remote const path = require(\u0026#39;path\u0026#39;) const newWindowBtn = document.getElementById(\u0026#39;new-window\u0026#39;) newWindowBtn.addEventListener(\u0026#39;click\u0026#39;, (event) =\u0026gt; { const modalPath = path.join(\u0026#39;file://\u0026#39;, __dirname, \u0026#39;../../sections/windows/modal.html\u0026#39;) let win = new BrowserWindow({ width: 400, height: 320 }) win.on(\u0026#39;close\u0026#39;, () =\u0026gt; { win = null }) win.loadURL(modalPath) win.show() }) ","ref":"https://electron.guide/cross-platform/browser-window/","title":"BrowserWindow"},{"body":" Context Menu Windows    Windows 10 Windows 7              MacOS   Sample Code Main Process const { BrowserWindow, Menu, MenuItem, ipcMain, app } = require(\u0026#39;electron\u0026#39;) const menu = new Menu() menu.append(new MenuItem({ label: \u0026#39;Hello\u0026#39; })) menu.append(new MenuItem({ type: \u0026#39;separator\u0026#39; })) menu.append(new MenuItem({ label: \u0026#39;Electron\u0026#39;, type: \u0026#39;checkbox\u0026#39;, checked: true })) app.on(\u0026#39;browser-window-created\u0026#39;, (event, win) =\u0026gt; { win.webContents.on(\u0026#39;context-menu\u0026#39;, (e, params) =\u0026gt; { menu.popup(win, params.x, params.y) }) }) ipcMain.on(\u0026#39;show-context-menu\u0026#39;, (event) =\u0026gt; { const win = BrowserWindow.fromWebContents(event.sender) menu.popup(win) })  Renderer Process const {ipcRenderer} = require(\u0026#39;electron\u0026#39;) // Tell main process to show the menu when demo button is clicked const contextMenuBtn = document.getElementById(\u0026#39;context-menu\u0026#39;) contextMenuBtn.addEventListener(\u0026#39;click\u0026#39;, () =\u0026gt; { ipcRenderer.send(\u0026#39;show-context-menu\u0026#39;) }) ","excerpt":"Context Menu Windows    Windows 10 Windows 7              MacOS   Sample Code Main Process const { BrowserWindow, Menu, MenuItem, ipcMain, app } = require(\u0026#39;electron\u0026#39;) const menu = new Menu() menu.append(new MenuItem({ label: \u0026#39;Hello\u0026#39; })) menu.append(new MenuItem({ type: \u0026#39;separator\u0026#39; })) menu.append(new MenuItem({ label: \u0026#39;Electron\u0026#39;, type: \u0026#39;checkbox\u0026#39;, checked: true })) app.on(\u0026#39;browser-window-created\u0026#39;, (event, win) =\u0026gt; { win.","ref":"https://electron.guide/cross-platform/context-menu/","title":"Context Menu"},{"body":" Menu Windows A Windows applications typically contain a menu bar at the top of the individual window.\n   Windows 10 Windows 7              MacOS MacOS uses a common menu bar at the screen’s top that the operating system and all applications share. When a particular window gets focus, the menu contents change based on the menu required by the window.\n  Sample Code const {BrowserWindow, Menu, app, shell, dialog} = require(\u0026#39;electron\u0026#39;) let template = [{ label: \u0026#39;Edit\u0026#39;, submenu: [{ label: \u0026#39;Undo\u0026#39;, accelerator: \u0026#39;CmdOrCtrl+Z\u0026#39;, role: \u0026#39;undo\u0026#39; }, { label: \u0026#39;Redo\u0026#39;, accelerator: \u0026#39;Shift+CmdOrCtrl+Z\u0026#39;, role: \u0026#39;redo\u0026#39; }, { type: \u0026#39;separator\u0026#39; }, { label: \u0026#39;Cut\u0026#39;, accelerator: \u0026#39;CmdOrCtrl+X\u0026#39;, role: \u0026#39;cut\u0026#39; }, { label: \u0026#39;Copy\u0026#39;, accelerator: \u0026#39;CmdOrCtrl+C\u0026#39;, role: \u0026#39;copy\u0026#39; }, { label: \u0026#39;Paste\u0026#39;, accelerator: \u0026#39;CmdOrCtrl+V\u0026#39;, role: \u0026#39;paste\u0026#39; }, { label: \u0026#39;Select All\u0026#39;, accelerator: \u0026#39;CmdOrCtrl+A\u0026#39;, role: \u0026#39;selectall\u0026#39; }] }, { label: \u0026#39;View\u0026#39;, submenu: [{ label: \u0026#39;Reload\u0026#39;, accelerator: \u0026#39;CmdOrCtrl+R\u0026#39;, click: (item, focusedWindow) =\u0026gt; { if (focusedWindow) { // on reload, start fresh and close any old  // open secondary windows  if (focusedWindow.id === 1) { BrowserWindow.getAllWindows().forEach(win =\u0026gt; { if (win.id \u0026gt; 1) win.close() }) } focusedWindow.reload() } } }, { label: \u0026#39;Toggle Full Screen\u0026#39;, accelerator: (() =\u0026gt; { if (process.platform === \u0026#39;darwin\u0026#39;) { return \u0026#39;Ctrl+Command+F\u0026#39; } else { return \u0026#39;F11\u0026#39; } })(), click: (item, focusedWindow) =\u0026gt; { if (focusedWindow) { focusedWindow.setFullScreen(!focusedWindow.isFullScreen()) } } }, { label: \u0026#39;Toggle Developer Tools\u0026#39;, accelerator: (() =\u0026gt; { if (process.platform === \u0026#39;darwin\u0026#39;) { return \u0026#39;Alt+Command+I\u0026#39; } else { return \u0026#39;Ctrl+Shift+I\u0026#39; } })(), click: (item, focusedWindow) =\u0026gt; { if (focusedWindow) { focusedWindow.toggleDevTools() } } }, { type: \u0026#39;separator\u0026#39; }, { label: \u0026#39;App Menu Demo\u0026#39;, click: function (item, focusedWindow) { if (focusedWindow) { const options = { type: \u0026#39;info\u0026#39;, title: \u0026#39;Application Menu Demo\u0026#39;, buttons: [\u0026#39;Ok\u0026#39;], message: \u0026#39;This demo is for the Menu section, showing how to create a clickable menu item in the application menu.\u0026#39; } dialog.showMessageBox(focusedWindow, options, function () {}) } } }] }, { label: \u0026#39;Window\u0026#39;, role: \u0026#39;window\u0026#39;, submenu: [{ label: \u0026#39;Minimize\u0026#39;, accelerator: \u0026#39;CmdOrCtrl+M\u0026#39;, role: \u0026#39;minimize\u0026#39; }, { label: \u0026#39;Close\u0026#39;, accelerator: \u0026#39;CmdOrCtrl+W\u0026#39;, role: \u0026#39;close\u0026#39; }, { type: \u0026#39;separator\u0026#39; }, { label: \u0026#39;Reopen Window\u0026#39;, accelerator: \u0026#39;CmdOrCtrl+Shift+T\u0026#39;, enabled: false, key: \u0026#39;reopenMenuItem\u0026#39;, click: () =\u0026gt; { app.emit(\u0026#39;activate\u0026#39;) } }] }, { label: \u0026#39;Help\u0026#39;, role: \u0026#39;help\u0026#39;, submenu: [{ label: \u0026#39;Learn More\u0026#39;, click: () =\u0026gt; { shell.openExternal(\u0026#39;http://electron.atom.io\u0026#39;) } }] }] function addUpdateMenuItems (items, position) { if (process.mas) return const version = app.getVersion() let updateItems = [{ label: `Version ${version}`, enabled: false }, { label: \u0026#39;Checking for Update\u0026#39;, enabled: false, key: \u0026#39;checkingForUpdate\u0026#39; }, { label: \u0026#39;Check for Update\u0026#39;, visible: false, key: \u0026#39;checkForUpdate\u0026#39;, click: () =\u0026gt; { require(\u0026#39;electron\u0026#39;).autoUpdater.checkForUpdates() } }, { label: \u0026#39;Restart and Install Update\u0026#39;, enabled: true, visible: false, key: \u0026#39;restartToUpdate\u0026#39;, click: () =\u0026gt; { require(\u0026#39;electron\u0026#39;).autoUpdater.quitAndInstall() } }] items.splice.apply(items, [position, 0].concat(updateItems)) } function findReopenMenuItem () { const menu = Menu.getApplicationMenu() if (!menu) return let reopenMenuItem menu.items.forEach(item =\u0026gt; { if (item.submenu) { item.submenu.items.forEach(item =\u0026gt; { if (item.key === \u0026#39;reopenMenuItem\u0026#39;) { reopenMenuItem = item } }) } }) return reopenMenuItem } if (process.platform === \u0026#39;darwin\u0026#39;) { const name = app.getName() template.unshift({ label: name, submenu: [{ label: `About ${name}`, role: \u0026#39;about\u0026#39; }, { type: \u0026#39;separator\u0026#39; }, { label: \u0026#39;Services\u0026#39;, role: \u0026#39;services\u0026#39;, submenu: [] }, { type: \u0026#39;separator\u0026#39; }, { label: `Hide ${name}`, accelerator: \u0026#39;Command+H\u0026#39;, role: \u0026#39;hide\u0026#39; }, { label: \u0026#39;Hide Others\u0026#39;, accelerator: \u0026#39;Command+Alt+H\u0026#39;, role: \u0026#39;hideothers\u0026#39; }, { label: \u0026#39;Show All\u0026#39;, role: \u0026#39;unhide\u0026#39; }, { type: \u0026#39;separator\u0026#39; }, { label: \u0026#39;Quit\u0026#39;, accelerator: \u0026#39;Command+Q\u0026#39;, click: () =\u0026gt; { app.quit() } }] }) // Window menu.  template[3].submenu.push({ type: \u0026#39;separator\u0026#39; }, { label: \u0026#39;Bring All to Front\u0026#39;, role: \u0026#39;front\u0026#39; }) addUpdateMenuItems(template[0].submenu, 1) } if (process.platform === \u0026#39;win32\u0026#39;) { const helpMenu = template[template.length - 1].submenu addUpdateMenuItems(helpMenu, 0) } app.on(\u0026#39;ready\u0026#39;, () =\u0026gt; { const menu = Menu.buildFromTemplate(template) Menu.setApplicationMenu(menu) }) app.on(\u0026#39;browser-window-created\u0026#39;, () =\u0026gt; { let reopenMenuItem = findReopenMenuItem() if (reopenMenuItem) reopenMenuItem.enabled = false }) app.on(\u0026#39;window-all-closed\u0026#39;, () =\u0026gt; { let reopenMenuItem = findReopenMenuItem() if (reopenMenuItem) reopenMenuItem.enabled = true }) ","excerpt":"Menu Windows A Windows applications typically contain a menu bar at the top of the individual window.\n   Windows 10 Windows 7              MacOS MacOS uses a common menu bar at the screen’s top that the operating system and all applications share. When a particular window gets focus, the menu contents change based on the menu required by the window.","ref":"https://electron.guide/cross-platform/menu/","title":"Menu"},{"body":" Notifications Windows    Windows 10 Windows 7       Basic      Basic        Notification with image      Notification with image       MacOS    Basic Notification with image              Sample Code Basic Notification const notification = { title: \u0026#39;Basic Notification\u0026#39;, body: \u0026#39;Short message part\u0026#39; } const notificationButton = document.getElementById(\u0026#39;basic-noti\u0026#39;) notificationButton.addEventListener(\u0026#39;click\u0026#39;, () =\u0026gt; { const myNotification = new window.Notification(notification.title, notification) myNotification.onclick = () =\u0026gt; { console.log(\u0026#39;Notification clicked\u0026#39;) } })  Notification with image const path = require(\u0026#39;path\u0026#39;) const notification = { title: \u0026#39;Notification with image\u0026#39;, body: \u0026#39;Short message plus a custom image\u0026#39;, icon: path.join(__dirname, \u0026#39;../../../assets/img/programming.png\u0026#39;) } const notificationButton = document.getElementById(\u0026#39;advanced-noti\u0026#39;) notificationButton.addEventListener(\u0026#39;click\u0026#39;, () =\u0026gt; { const myNotification = new window.Notification(notification.title, notification) myNotification.onclick = () =\u0026gt; { console.log(\u0026#39;Notification clicked\u0026#39;) } })  Extra Info  https://electronjs.org/docs/tutorial/notifications (HTML5 Renderer Process) https://github.com/felixrieseberg/electron-windows-notifications  ","excerpt":"Notifications Windows    Windows 10 Windows 7       Basic      Basic        Notification with image      Notification with image       MacOS    Basic Notification with image              Sample Code Basic Notification const notification = { title: \u0026#39;Basic Notification\u0026#39;, body: \u0026#39;Short message part\u0026#39; } const notificationButton = document.","ref":"https://electron.guide/cross-platform/notifications/","title":"Notifications"},{"body":" Standard Dialogs Windows    Windows 10 Windows 7       Open file      Open file        Save file      Save file       MacOS    Open Save              Sample Code Main Process const {ipcMain, dialog} = require(\u0026#39;electron\u0026#39;) ipcMain.on(\u0026#39;save-dialog\u0026#39;, (event) =\u0026gt; { const options = { title: \u0026#39;Save an Image\u0026#39;, filters: [ { name: \u0026#39;Images\u0026#39;, extensions: [\u0026#39;jpg\u0026#39;, \u0026#39;png\u0026#39;, \u0026#39;gif\u0026#39;] } ] } dialog.showSaveDialog(options, (filename) =\u0026gt; { event.sender.send(\u0026#39;saved-file\u0026#39;, filename) }) })  Renderer Process const {ipcRenderer} = require(\u0026#39;electron\u0026#39;) const saveBtn = document.getElementById(\u0026#39;save-dialog\u0026#39;) saveBtn.addEventListener(\u0026#39;click\u0026#39;, (event) =\u0026gt; { ipcRenderer.send(\u0026#39;save-dialog\u0026#39;) }) ipcRenderer.on(\u0026#39;saved-file\u0026#39;, (event, path) =\u0026gt; { if (!path) path = \u0026#39;No path\u0026#39; document.getElementById(\u0026#39;file-saved\u0026#39;).innerHTML = `Path selected: ${path}` }) ","excerpt":"Standard Dialogs Windows    Windows 10 Windows 7       Open file      Open file        Save file      Save file       MacOS    Open Save              Sample Code Main Process const {ipcMain, dialog} = require(\u0026#39;electron\u0026#39;) ipcMain.","ref":"https://electron.guide/cross-platform/standard-dialogs/","title":"Standard Dialogs"},{"body":" The Final Polish before release - Application Prevent a second instance of your application from running dom-ready vs ready-to-show Store configuration data https://github.com/sindresorhus/electron-store\nhttps://github.com/atom/node-keytar\nhttps://medium.com/cameron-nokes/how-to-securely-store-sensitive-information-in-electron-with-node-keytar-51af99f1cfc4\n 1. dom-ready vs ready-to-show\napp.Dock.Hide()\nif !app.Call(\u0026ldquo;requestSingleInstanceLock\u0026rdquo;).Bool() { // Second instance app.Exit(0) }\n// Prevent Electron from never exiting when an exception happensprocess.on(\u0026lsquo;uncaughtException\u0026rsquo;, error =\u0026gt; { console.error(\u0026lsquo;Exception:\u0026lsquo;, error); process.exit(1);});\n// Store data in electron-store\n","excerpt":"The Final Polish before release - Application Prevent a second instance of your application from running dom-ready vs ready-to-show Store configuration data https://github.com/sindresorhus/electron-store\nhttps://github.com/atom/node-keytar\nhttps://medium.com/cameron-nokes/how-to-securely-store-sensitive-information-in-electron-with-node-keytar-51af99f1cfc4\n 1. dom-ready vs ready-to-show\napp.Dock.Hide()\nif !app.Call(\u0026ldquo;requestSingleInstanceLock\u0026rdquo;).Bool() { // Second instance app.Exit(0) }\n// Prevent Electron from never exiting when an exception happensprocess.on(\u0026lsquo;uncaughtException\u0026rsquo;, error =\u0026gt; { console.error(\u0026lsquo;Exception:\u0026lsquo;, error); process.exit(1);});\n// Store data in electron-store","ref":"https://electron.guide/final-polish/application/","title":"The Final Polish - Application"},{"body":" The Final Polish before release - BrowserWindow prevent Cmd+R/F5\nhide dev tools\nelectron-disable-file-drop Disable draggable Disable user selections\n","excerpt":"The Final Polish before release - BrowserWindow prevent Cmd+R/F5\nhide dev tools\nelectron-disable-file-drop Disable draggable Disable user selections","ref":"https://electron.guide/final-polish/browser-window/","title":"The Final Polish - BrowserWindow"},{"body":" Tray Windows    Windows 10 Windows 7               Tray menu      Tray menu        Balloon      Balloon       MacOS   Sample Code Main Process const path = require(\u0026#39;path\u0026#39;) const {ipcMain, app, Menu, Tray} = require(\u0026#39;electron\u0026#39;) let appIcon = null ipcMain.on(\u0026#39;put-in-tray\u0026#39;, (event) =\u0026gt; { const iconName = process.platform === \u0026#39;win32\u0026#39; ? \u0026#39;windows-icon.png\u0026#39; : \u0026#39;iconTemplate.png\u0026#39; const iconPath = path.join(__dirname, iconName) appIcon = new Tray(iconPath) const contextMenu = Menu.buildFromTemplate([{ label: \u0026#39;Remove\u0026#39;, click: () =\u0026gt; { event.sender.send(\u0026#39;tray-removed\u0026#39;) } }]) appIcon.setToolTip(\u0026#39;Electron Demo in the tray.\u0026#39;) appIcon.setContextMenu(contextMenu) }) ipcMain.on(\u0026#39;remove-tray\u0026#39;, () =\u0026gt; { appIcon.destroy() }) app.on(\u0026#39;window-all-closed\u0026#39;, () =\u0026gt; { if (appIcon) appIcon.destroy() })  Renderer Process const ipc = require(\u0026#39;electron\u0026#39;).ipcRenderer const trayBtn = document.getElementById(\u0026#39;put-in-tray\u0026#39;) let trayOn = false trayBtn.addEventListener(\u0026#39;click\u0026#39;, function (event) { if (trayOn) { trayOn = false document.getElementById(\u0026#39;tray-countdown\u0026#39;).innerHTML = \u0026#39;\u0026#39; ipc.send(\u0026#39;remove-tray\u0026#39;) } else { trayOn = true const message = \u0026#39;Click demo again to remove.\u0026#39; document.getElementById(\u0026#39;tray-countdown\u0026#39;).innerHTML = message ipc.send(\u0026#39;put-in-tray\u0026#39;) } }) // Tray removed from context menu on icon ipc.on(\u0026#39;tray-removed\u0026#39;, function () { ipc.send(\u0026#39;remove-tray\u0026#39;) trayOn = false document.getElementById(\u0026#39;tray-countdown\u0026#39;).innerHTML = \u0026#39;\u0026#39; })  Known Bugs  Once you create a tray icon, attempting to destroy it will crash the application.  ","excerpt":"Tray Windows    Windows 10 Windows 7               Tray menu      Tray menu        Balloon      Balloon       MacOS   Sample Code Main Process const path = require(\u0026#39;path\u0026#39;) const {ipcMain, app, Menu, Tray} = require(\u0026#39;electron\u0026#39;) let appIcon = null ipcMain.","ref":"https://electron.guide/cross-platform/tray/","title":"Tray"}]